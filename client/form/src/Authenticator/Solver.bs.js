// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Util$ReactTemplate = require("../util.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var component = ReasonReact.reducerComponent("Solver");

function make(challenge, solve, post_state, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var tmp;
      if (post_state) {
        var match = post_state[0];
        tmp = typeof match === "number" ? "Loading..." : (
            match.tag ? "FAILED" : match[0]
          );
      } else {
        throw [
              Caml_builtin_exceptions.match_failure,
              [
                "Solver.re",
                20,
                4
              ]
            ];
      }
      return React.createElement("div", undefined, React.createElement("h2", undefined, "2. Solve this: " + challenge), tmp, React.createElement("textarea", {
                      value: self[/* state */1][/* solution */0],
                      onChange: (function (param) {
                          return Util$ReactTemplate.onChangeToAction((function (new_value) {
                                        return Curry._1(self[/* send */3], /* SET_SOLUTION */[new_value]);
                                      }), param);
                        })
                    }), React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(solve, self[/* state */1][/* solution */0]);
                        })
                    }, Util$ReactTemplate.ste("SOLVE")));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* solution */""];
    });
  newrecord[/* reducer */12] = (function (action, _) {
      return /* Update */Block.__(0, [/* record */[/* solution */action[0]]]);
    });
  return newrecord;
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
