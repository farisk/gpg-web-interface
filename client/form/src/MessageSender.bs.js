// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var React = require("react");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var url = "http://127.0.0.1:3000";

var component = ReasonReact.reducerComponent("Sender");

function send_message(self) {
  var payload = { };
  payload["message"] = self[/* state */2][/* message */1];
  fetch("http://127.0.0.1:3000/message", Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[{
                    "Content-Type": "application/json"
                  }], /* Some */[JSON.stringify(payload)], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)).then((function (res) {
            var match = +res.ok;
            return Promise.resolve(Curry._1(self[/* send */4], match !== 0 ? /* SEND_SUCCESS */1 : /* ERROR */Block.__(1, [/* Bad_Input */1])));
          })).catch((function () {
          return Promise.resolve(Curry._1(self[/* send */4], /* ERROR */Block.__(1, [/* Conns */0])));
        }));
  return /* () */0;
}

function get_status_message(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return null;
      case 1 : 
          return "Loading";
      case 2 : 
          return "Success";
      
    }
  } else if (param[0] !== 0) {
    return "Your signature is bad or I do not know you!";
  } else {
    return "Connection Error";
  }
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", undefined, React.createElement("textarea", {
                      value: self[/* state */2][/* message */1],
                      onChange: (function (evt) {
                          return Curry._1(self[/* send */4], /* UPDATE_TEXT */Block.__(0, [evt.target.value]));
                        })
                    }), get_status_message(self[/* state */2][/* save_fetcher */0]), React.createElement("button", {
                      disabled: Js_boolean.to_js_boolean(+(self[/* state */2][/* save_fetcher */0] === /* Pending */1)),
                      onClick: (function () {
                          return Curry._1(self[/* send */4], /* SEND */0);
                        })
                    }, "Send"));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* save_fetcher : Chilling */0,
              /* message */""
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        if (action === 0) {
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* record */[
                      /* save_fetcher : Pending */1,
                      /* message */state[/* message */1]
                    ],
                    send_message
                  ]);
        } else {
          return /* Update */Block.__(0, [/* record */[
                      /* save_fetcher : Success */2,
                      /* message */state[/* message */1]
                    ]]);
        }
      } else if (action.tag) {
        return /* Update */Block.__(0, [/* record */[
                    /* save_fetcher : Failed */[action[0]],
                    /* message */state[/* message */1]
                  ]]);
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* save_fetcher */state[/* save_fetcher */0],
                    /* message */action[0]
                  ]]);
      }
    });
  return newrecord;
}

exports.url = url;
exports.component = component;
exports.send_message = send_message;
exports.get_status_message = get_status_message;
exports.make = make;
/* component Not a pure module */
